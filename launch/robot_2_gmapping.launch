<launch>
    <arg name="world" default="ROS-Academy" doc="ISCAS_building, ROS-Academy, small_city"/>
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <!-- Include Gazebo's empty world launch -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find robot_description)/worlds/$(arg world).world"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- Spawn the robot -->
    <param name="robot_description" command="rosrun xacro xacro $(find robot_second)/xacro/p3dx/pioneer3dx.xacro"/>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model your_robot_name -param robot_description" />

    <!-- Add joint_state_publisher -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

    <!-- Add robot_state_publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <!-- Velodyne LiDAR Driver (if using real hardware, modify for simulation) -->
    <node pkg="velodyne_driver" type="velodyne_node" name="velodyne_node" output="screen">
        <param name="device_ip" value="192.168.1.201"/> <!-- Modify this with your LiDAR's IP address -->
        <param name="frame_id" value="velodyne"/>
    </node>

    <node pkg="velodyne_pointcloud" type="transform_node" name="velodyne_transform_node" output="screen">
        <param name="frame_id" value="velodyne"/>
    </node>

    <!-- PointCloud to LaserScan Conversion -->
    <node pkg="nodelet" type="nodelet" name="cloud_to_scan" args="standalone pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet">
        <param name="range_min" value="0.1"/>
        <param name="range_max" value="10.0"/>
        <param name="scan_time" value="0.1"/>
        <param name="angle_increment" value="0.008"/>
        <param name="output_frame" value="velodyne"/>
        <remap from="cloud_in" to="/velodyne_points"/>
        <remap from="scan" to="/scan"/>
    </node>

    <!-- Gmapping Node -->
    <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">
        <param name="base_frame" value="base_link"/>
        <param name="odom_frame" value="odom"/>
        <param name="map_update_interval" value="5.0"/>
        <param name="maxUrange" value="10.0"/>
        <param name="maxRange" value="10.0"/>
        <remap from="scan" to="/scan"/>
    </node>

    <!-- TF Static Transform Publisher (if necessary) -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_velodyne" args="0 0 0 0 0 0 base_link velodyne"/>
</launch>
